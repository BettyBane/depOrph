generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://devAdem:Shangquan1!@127.0.0.1:5432/depOrph"
}

model Donor {
  id                  Int                  @id @default(autoincrement())
  /// The value of this field is generated by the database as: `now()`.
  created_at          DateTime?            @default(now())
  updated_at          DateTime?
  companyName         String
  nameInitials        String
  orphans             Orphan[]             @relation("donorToorphan")
  peasantAssociations PeasantAssociation[] @relation("donorTopeasantassociation")
  supportPlans        SupportPlan[]        @relation("donorTosupportplan")

  @@map("donor")
}

model Education {
  id                 Int                             @id @default(autoincrement())
  /// The value of this field is generated by the database as: `now()`.
  created_at         DateTime?                       @default(now())
  updated_at         DateTime?
  enrollmentStatus   education_enrollmentstatus_enum
  schoolName         String?
  typeOfSchool       education_typeofschool_enum?
  year               String?
  level              education_level_enum?
  reason             String?
  educationalRecords EducationalRecord[]             @relation("educationToeducationalrecord")
  orphan             Orphan[]                        @relation("educationToorphan")

  @@map("education")
}

model Father {
  id                  Int       @id @default(autoincrement())
  /// The value of this field is generated by the database as: `now()`.
  created_at          DateTime? @default(now())
  updated_at          DateTime?
  dateOfDeath         DateTime
  causeOfDeath        String
  dateOfBirth         DateTime
  deathCertificateUrl String
  orphans             Orphan[]  @relation("fatherToorphan")

  @@map("father")
}

model Guardian {
  id                            Int                            @id @default(autoincrement())
  /// The value of this field is generated by the database as: `now()`.
  created_at                    DateTime?                      @default(now())
  updated_at                    DateTime?
  firstName                     String
  middleName                    String
  lastName                      String
  gender                        guardian_gender_enum
  relationToOrphan              guardian_relationtoorphan_enum
  email                         String
  POBox                         String?
  dateOfBirth                   DateTime
  guardianIDCardUrl             String
  guardianConfirmationLetterUrl String
  phoneNumber                   String
  orphans                       Orphan[]                       @relation("guardianToorphan")

  @@map("guardian")
}

model Mother {
  id             Int                   @id @default(autoincrement())
  /// The value of this field is generated by the database as: `now()`.
  created_at     DateTime?             @default(now())
  updated_at     DateTime?
  firstName      String
  middleName     String
  lastName       String
  vitalStatus    mother_vitalStatus
  dateOfBirth    DateTime
  dateOfDeath    DateTime?
  causeOfDeath   String?
  phoneNumber    String
  maritalStatus  mother_maritalStatus?
  monthlyExpense Decimal
  jobs           MotherJob[]           @relation("motherTomotherjob")
  orphans        Orphan[]              @relation("motherToorphan")

  @@map("mother")
}

model MotherJob {
  id              Int       @id @default(autoincrement())
  /// The value of this field is generated by the database as: `now()`.
  created_at      DateTime? @default(now())
  updated_at      DateTime?
  currentJobTitle String?
  monthlyIncome   Decimal?
  initDate        DateTime?
  termDate        DateTime?
  motherId        Int?
  mother          Mother?   @relation("motherTomotherjob", fields: [motherId], references: [id])

  @@map("motherjob")
}

model Orphan {
  id                     Int                              @id @default(autoincrement())
  /// The value of this field is generated by the database as: `now()`.
  created_at             DateTime?                        @default(now())
  updated_at             DateTime?
  firstName              String
  fatherName             String
  grandfatherName        String
  gender                 orphan_gender_enum
  placeOfBirth           String
  dateOfBirth            DateTime
  spokenLanguages        String?
  gradeAgeMismatchReason String?
  hobbies                String?
  religion               orphan_religion_enum?
  idCardUrl              String?
  passportUrl            String?
  thankyouLetterUrl      String?
  birthCertificateUrl    String
  psychologicalStatus    orphan_psychologicalstatus_enum?
  accountNumber          String?
  currentBalance         Decimal?
  motherId               Int?
  fatherId               Int?
  guardianId             Int?
  educationId            Int?
  donorId                Int?
  districtId             Int?
  peasantAssociationId   Int?
  house_propertyId       Int?
  supportPlanId          Int?
  socialWorkerId         Int?
  healthDescription      String
  district               District?                        @relation("districtToorphan", fields: [districtId], references: [id])
  donor                  Donor?                           @relation("donorToorphan", fields: [donorId], references: [id])
  education              Education?                       @relation("educationToorphan", fields: [educationId], references: [id])
  father                 Father?                          @relation("fatherToorphan", fields: [fatherId], references: [id])
  guardian               Guardian?                        @relation("guardianToorphan", fields: [guardianId], references: [id])
  house_property         House_property?                  @relation("house_propertyToorphan", fields: [house_propertyId], references: [id])
  mother                 Mother?                          @relation("motherToorphan", fields: [motherId], references: [id])
  peasantAssociation     PeasantAssociation?              @relation("orphanTopeasantassociation", fields: [peasantAssociationId], references: [id])
  socialWorker           SocialWorker?                    @relation("orphanTosocialworker", fields: [socialWorkerId], references: [id])
  supportPlan            SupportPlan?                     @relation("orphanTosupportplan", fields: [supportPlanId], references: [id])
  financialRecords       FinancialRecord[]                @relation("financialrecordToorphan")
  healthRecords          HealthRecord[]                   @relation("healthrecordToorphan")
  photos                 OrphanPhotos[]                   @relation("orphanToorphanphotos")
  sponsorshipStatuses    SponsorshipStatus[]              @relation("orphanTosponsorshipstatus")
  orphan_B               Orphan[]                         @relation("orphan_sibling")
  orphan_A               Orphan[]                         @relation("orphan_sibling")

  @@map("orphan")
}

model SocialWorker {
  id                   Int                       @id @default(autoincrement())
  /// The value of this field is generated by the database as: `now()`.
  created_at           DateTime?                 @default(now())
  updated_at           DateTime?
  fullName             String
  gender               socialworker_gender_enum?
  dateOfBirth          DateTime?
  phoneNumber          String
  email                String
  initDate             DateTime?
  termDate             DateTime?
  peasantAssociationId Int?
  peasantAssociation   PeasantAssociation?       @relation("peasantassociationTosocialworker", fields: [peasantAssociationId], references: [id])
  orphans              Orphan[]                  @relation("orphanTosocialworker")

  @@map("socialworker")
}

model District {
  id                  Int                  @id @default(autoincrement())
  created_at          DateTime?            @default(now())
  updated_at          DateTime?
  districtName        String
  region              String
  zone                String
  orphans             Orphan[]             @relation("districtToorphan")
  peasantAssociations PeasantAssociation[]

  @@map("district")
}

model EducationalRecord {
  id               Int                                  @id @default(autoincrement())
  created_at       DateTime?                            @default(now())
  updated_at       DateTime?
  yearDivision     educationalrecord_yeardivision_enum?
  quarter          educationalrecord_quarter_enum?
  semester         educationalrecord_semester_enum?
  totalMark        Decimal?
  numberOfSubjects Int?
  average          Decimal?
  rank             Int?
  reportCardUrl    String?
  semesterGPA      Decimal?
  cumulativeGPA    Decimal?
  educationId      Int?
  education        Education?                           @relation("educationToeducationalrecord", fields: [educationId], references: [id])

  @@map("educationalrecord")
}

model FinancialRecord {
  id                Int                          @id @default(autoincrement())
  created_at        DateTime?                    @default(now())
  updated_at        DateTime?
  transactionDate   DateTime?
  transactionType   transaction_type_enum?
  amount            Decimal?
  reason            financialrecord_reason_enum?
  specialCaseReason String?
  orphanId          Int?
  orphan            Orphan?                      @relation("financialrecordToorphan", fields: [orphanId], references: [id])

  @@map("financialrecord")
}

model HealthRecord {
  id                    Int       @id @default(autoincrement())
  created_at            DateTime? @default(now())
  updated_at            DateTime?
  medicalCenterName     String?
  dateOfExamination     DateTime?
  diagnosis             String?
  doctorsRecommendation String?
  restRecommended       String?
  totalMedicalExpense   Decimal?
  medicalCerificateUrl  String?
  orphanId              Int?
  orphan                Orphan?   @relation("healthrecordToorphan", fields: [orphanId], references: [id])

  @@map("healthrecord")
}

model House_property {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  housingSituation String
  otherProperty    String?
  orphans          Orphan[]  @relation("house_propertyToorphan")

  @@map("house_property")
}

model OrphanPhotos {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  photoPortraitUrl String
  photoLongUrl     String?
  orphanId         Int?
  orphan           Orphan?   @relation("orphanToorphanphotos", fields: [orphanId], references: [id])

  @@map("orphanphotos")
}

model PeasantAssociation {
  id               Int            @id @default(autoincrement())
  created_at       DateTime?      @default(now())
  updated_at       DateTime?
  registrationDate DateTime
  paName           String?
  districtId       Int?
  donorId          Int?
  district         District?      @relation(fields: [districtId], references: [id])
  donor            Donor?         @relation("donorTopeasantassociation", fields: [donorId], references: [id])
  orphans          Orphan[]       @relation("orphanTopeasantassociation")
  socialWorkers    SocialWorker[] @relation("peasantassociationTosocialworker")

  @@map("peasantassociation")
}

model SponsorshipStatus {
  id         Int                     @id @default(autoincrement())
  status     sponsorshipstatus_enum?
  orphanId   Int?
  created_at DateTime?               @default(now())
  updated_at DateTime?
  date       DateTime
  orphan     Orphan?                 @relation("orphanTosponsorshipstatus", fields: [orphanId], references: [id])

  @@map("sponsorshipstatus")
}

model SupportPlan {
  id             Int       @id @default(autoincrement())
  created_at     DateTime? @default(now())
  updated_at     DateTime?
  totalFund_fc   Decimal?
  currency       String?
  totalFund_brr  Decimal?
  adminFee_brr   Decimal?
  netPayment_brr Decimal?
  initDate       DateTime?
  termDate       DateTime?
  donorId        Int?
  donor          Donor?    @relation("donorTosupportplan", fields: [donorId], references: [id])
  orphans        Orphan[]  @relation("orphanTosupportplan")

  @@map("supportplan")
}

enum education_enrollmentstatus_enum {
  enrolled
  unenrolled
  droppedout
}

enum education_level_enum {
  preSchool
  gradeSchool
  underGraduate
  postGraduate
  N_A @map("N/A")
}

enum education_typeofschool_enum {
  private
  public
}

enum educationalrecord_quarter_enum {
  first
  second
  third
  fourth
}

enum educationalrecord_semester_enum {
  first
  second
}

enum educationalrecord_yeardivision_enum {
  semester
  quarter_term
}

enum financialrecord_reason_enum {
  ASFC
  RSFC
  AAB
  AFB
  NPB
  EW
  HW
  NW
  SCW
}

enum guardian_gender_enum {
  M
  F
}

enum guardian_relationtoorphan_enum {
  mother
  grandmother
  grandfather
  sister
  brother
  uncle
  aunt
  cousin
  niece
  nephew
}

enum mother_maritalStatus {
  married
  widow
  N_A @map("N/A")
}

enum mother_vitalStatus {
  alive
  passed
}

enum orphan_gender_enum {
  M
  F
}

enum orphan_psychologicalstatus_enum {
  isolated
  stressed
  unsociable
  overlysociable
  normal
}

enum orphan_religion_enum {
  Christianity
  Islam
  Buddhism
  Hinduism
  Judaism
}

enum socialworker_gender_enum {
  M
  F
}

enum sponsorshipstatus_enum {
  inProgress
  active
  suspended
  graduated
}

enum transaction_type_enum {
  withdrawal
  deposit
  assign
  re_assign
}
